<?xml version="1.0" encoding="UTF-8"?>
<project name="php">
    <!-- Mandatory targets -->
    <target name="configure" />
    <target name="build" />
    <target name="review" depends="review.lint,review.phpmd,review.phpcpd,review.phpcs,review.phrocco" />
    <target name="migrate" />
    <target name="sync" />

	<!-- Cleans up and create artifact directories -->
    <target name="review.clean">
        <delete dir="${project.dirs.base}/build/api" />
        <delete dir="${project.dirs.base}/build/code-browser" />
        <delete dir="${project.dirs.base}/build/coverage" />
        <delete dir="${project.dirs.base}/build/logs" />
        <delete dir="${project.dirs.base}/build/pdepend" />
        <delete dir="${project.dirs.base}/build/phrocco" />
        <delete dir="${project.dirs.base}/build/src" />

        <mkdir dir="${project.dirs.base}/build/api" />
        <mkdir dir="${project.dirs.base}/build/code-browser" />
        <mkdir dir="${project.dirs.base}/build/coverage" />
        <mkdir dir="${project.dirs.base}/build/logs" />
        <mkdir dir="${project.dirs.base}/build/pdepend" />
        <mkdir dir="${project.dirs.base}/build/phrocco" />
        <mkdir dir="${project.dirs.base}/build/src" />
    </target>

    <!-- Discovers files that have been recently modified -->
    <target name="review.files.discover" unless="files">
        <exec executable="sh" outputproperty="files">
            <arg value="-c" />
            <arg value="${toolkit.basedir}/bin/git-needsreview -b ${php.review.branch} -f ${php.review.filter} | xargs | sed 's/ /,/g'" />
        </exec>
    </target>

    <!-- Finds which files must be reviewed -->
    <target name="review.files" depends="review.files.discover">
        <copy todir="${project.dirs.base}/build/src">
            <fileset dir="${project.dirs.base}" includes="${files}" excludes="${php.review.exclude}" />
        </copy>
    </target>

    <!-- Searches code for syntax errors -->
    <target name="review.lint" depends="review.clean, review.files">
        <apply executable="${php.executable}" failonerror="true">
            <arg value="-l" />
            <fileset dir="${project.dirs.base}/build/src" />
        </apply>
    </target>

    <!-- Runs PHPMD on files that needs review -->
    <target name="review.phpmd" depends="review.clean, review.files">
        <exec executable="phpmd">
            <arg line="${project.dirs.base}/build/src
                    xml
                    codesize,design,naming,unusedcode
                    --reportfile ${project.dirs.base}/build/logs/pmd.xml" />
        </exec>
    </target>

    <!-- Runs copy / paste detection on files that needs review -->
    <target name="review.phpcpd" depends="review.clean, review.files">
        <exec executable="phpcpd">
            <arg line="--log-pmd ${project.dirs.base}/build/logs/pmd-cpd.xml
                    ${project.dirs.base}/build/src" />
        </exec>
    </target>

    <!-- Runs Checkstyle on files that needs review -->
    <target name="review.phpcs" depends="review.clean, review.files">
        <exec executable="phpcs">
            <arg line="--report=checkstyle
                    --report-file=${project.dirs.base}/build/logs/checkstyle.xml
                    --standard=${php.review.phpcs.standard}
                    ${project.dirs.base}/build/src" />
        </exec>
    </target>

    <!-- Runs HipHop static analysis on files that needs review -->
    <target name="review.hphpa" depends="review.clean, review.files">
        <exec executable="hphpa">
            <arg line="--checkstyle ${project.dirs.base}/build/logs/hphpa.xml
                    ${project.dirs.base}/build/src" />
        </exec>
    </target>

    <!-- Runs HipHop static analysis on files that needs review -->
    <target name="review.phrocco" depends="review.clean, review.files">
        <!-- We need this complicated call as phrocco uses short open tags -->
        <exec executable="/usr/bin/env" dir="${project.dirs.base}" os="Linux">
            <arg line="php -d 'short_open_tag=1' /usr/bin/phrocco -i build/src -o build/phrocco" />
        </exec>
        <exec executable="/usr/bin/env" dir="${project.dirs.base}" os="Mac OS X">
            <arg line="php -d 'short_open_tag=1' /opt/local/bin/phrocco -i build/src -o build/phrocco" />
        </exec>
    </target>

    <!-- Aggregate tool output with PHP_CodeBrowser -->
    <target name="review.phpcb">
        <exec executable="phpcb">
            <arg line="--log ${project.dirs.base}/build/logs
                       --output ${project.dirs.base}/build/code-browser" />
        </exec>
    </target>

    <!-- Generates a browsable view of review warnings -->
    <target name="review.browse">
        <antcall target="review.phpcb" />
        <exec executable="${php.review.phpcb.browser}" os="Linux">
            <arg line="${php.review.build.url}/code-browser/index.html ${php.review.build.url}/phrocco" />
        </exec>
        <exec executable="open" os="Mac OS X">
            <arg line="-a ${php.review.phpcb.browser} ${php.review.build.url}/code-browser/index.html ${php.review.build.url}/phrocco" />
       </exec>
    </target>

    <!-- Installs dependencies required by the review target -->
    <target name="review.bootstrap">
        <!-- Upgrade PEAR to latest version -->
        <exec executable="pear">
            <arg line="upgrade pear/pear" />
        </exec>

        <!-- Discover channels -->
        <exec executable="pear">
            <arg line="channel-discover pear.phpunit.de" />
        </exec>
        <exec executable="pear">
            <arg line="channel-discover pear.phpmd.org" />
        </exec>
        <exec executable="pear">
            <arg line="channel-discover pear.pdepend.org" />
        </exec>
        <exec executable="pear">
            <arg line="channel-discover oneblackbear.pearfarm.org" />
        </exec>
        <exec executable="pear">
            <arg line="channel-discover components.ez.no" />
        </exec>

        <!-- Install packages -->
        <exec executable="pear">
            <arg line="install -a phpunit/PHP_CodeBrowser-beta" />
        </exec>
        <exec executable="pear">
            <arg line="install -a phpunit/phpcpd" />
        </exec>
        <exec executable="pear">
            <arg line="install -a phpunit/phploc" />
        </exec>
        <exec executable="pear">
            <arg line="install -a phpunit/hphpa" />
        </exec>
        <exec executable="pear">
            <arg line="install -a phpmd/PHP_PMD" />
        </exec>
        <exec executable="pear">
            <arg line="install -a pdepend/PHP_Depend-beta" />
        </exec>
        <exec executable="pear">
            <arg line="install -a pear/PHP_CodeSniffer" />
        </exec>
        <exec executable="pear">
            <arg line="install -a pear/PhpDocumentor" />
        </exec>
        <exec executable="pear">
            <arg line="install -a oneblackbear/phrocco-0.2.5" />
        </exec>
    </target>
</project>